set nocompatible

if has("syntax")
    syntax on
endif

filetype plugin indent on

if has("gui_running")
    set guioptions-=m
    set guioptions-=T
    set guioptions-=L

    if has("win32")
        set guifont=Courier_New:h12:cANSI
        set fileencodings=
    else
        set guifont=Consolas\ 14
        set fileencodings=utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1,ucs-bom
        colorscheme ljyat
    endif
else
    colorscheme default
endif

""""""""Special in Gvim"""""""""""""""""""""""
"t_vb when use gvim , you have to set in /etc/vim/gvimrc,
"vimrc is not usefull for gvim
"set vb t_vb=
""""""""""""""""""""""""""""""""""""""""""""""
set showmatch		" Show matching brackets.
set incsearch		" Incremental search
set autowrite		" Automatically save before commands like :next and :make
set hidden             " Hide buffers when they are abandoned
set mouse=a		" Enable mouse usage (all modes)
set history=700
set scrolloff=0
set autoread
set ffs=unix,dos,mac
set noswapfile
set updatetime=100
set previewheight=10
set nu
set linespace=3
set autoindent
set smartindent
set cindent 
set tabstop=4
set shiftwidth=4
set et
set smarttab
set linebreak
set nobackup
set backspace=indent,eol,start
set t_Co=256
set nowrapscan
set winaltkeys=no
set diffopt=filler,horizontal
set dictionary=dict
let c_syntax_for_h = 1
let Tlist_WinWidth = 40
let g:tagbar_left = 1
let g:tagbar_sort = 0
let html_wrong_comments = 1
"config for taglist
let Tlist_Inc_Winwidth = 0

"=> key maps
nmap <F7> :set noet shiftwidth=8 ts=8 <CR>
nmap <F8> :set et shiftwidth=4 ts=4 <CR>
nmap <C-s> :LjyatSearchStringCurrentBuffer <CR>
nmap <M-f> :LjyatSearchFileInFileList <CR>
vnoremap <M-r> <ESC>:call LjyatVSearchStringInFiles() <CR>
vnoremap <M-R> <ESC>:call LjyatVSearchStringCurrentBuffer() <CR>

nmap j gj
nmap k gk

nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>

nmap <M-[> :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <M-\> :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <M-t> :cs f t 
"=> switch windows
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-h> <C-w>h
map <C-l> <C-w>l
nmap <M-2> <C-w>c
nmap <M-3> <C-w>v
nmap <M-/> :LjyatSearchTags<CR>
"=> switch windows end
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"=> normal set
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"move
nmap <M-j> 3<C-e>
nmap <M-k> 3<C-y>
nmap <M-c> :nohlsearch <CR> :MarkClear<CR>
nmap <M-q> <C-q>
"copy and paste
vmap <C-c> "+y
vmap m <leader>m
nmap <C-v> "+p

nmap <M-e> g_
nmap <M-a> 0
nmap <M-1> :pc<CR>:lcl<CR>:echomsg ""<CR>
nmap <M-m> <leader>m
nmap <M-]> g<C-]>

nmap <F4> :TagbarToggle<CR>
nmap <F2> :call ToggleTlistTagbar()<CR>
nmap <M-LeftMouse> <LeftMouse><leader>m
nmap <RightMouse> <C-o>
nmap <S-LeftMouse> <LeftMouse>:nohlsearch<CR>:MarkClear<CR><leader>m
nmap <M-RightMouse> :nohlsearch<CR>:MarkClear<CR>
nmap <F5> :nohlsearch <CR>:MarkClear<CR>
nmap <F6> :TlistClose<CR> :JavaBrowser <CR>

"grep -E 
nmap <M-s> :LjyatSearchStringInFiles<CR>
nmap <F9> :edit ++ff=dos <CR>

"color set
nmap M :nohlsearch<CR>:MarkClear<CR><leader>m
nmap n <leader>/
nmap N <leader>?
nmap <leader>] <C-w>g}

nmap <F3> :LjyatNERDTreeOpenBufDir<CR>

let NERDTreeWinPos = "right"
function! LjyatNERDTreeOpenBufDir()
    if (exists("t:NERDTreeBufName"))
        if (bufwinnr(t:NERDTreeBufName) != -1)
            execute "silent! NERDTreeClose"
            return
        endif
    endif
    let l:bufname = bufname("%")
    execute "silent! NERDTree " . l:bufname
endfunction
command! LjyatNERDTreeOpenBufDir call LjyatNERDTreeOpenBufDir ()

"=> cscope set
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("cscope")
    set csprg=/usr/bin/cscope
    set csto=1
    set nocst
    set nocsverb
    " add any database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
        " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
    set csverb
endif

function! CscopeReload_cs()
    if has("cscope")
        if !filereadable("cscope.out")
            echohl Special
            echo "   cscope.out not exist"
            echohl None
            return
        endif

        set nocscopeverbose
        cs kill -1
        cs add  cscope.out
        set cscopeverbose
        echohl Question
        echo '  Add cscope.out'
        echohl None
    endif
endfunction
command! R call CscopeReload_cs()

function! LjyatSearchTags()
    if !filereadable("tags")
        echohl Special
        echo "   tags file not exist"
        echohl None
        return
    endif

    echohl Question
    let pattern = input("  Search tag: ")
    echohl None

    if pattern == ""
        return 
    endif

    execute "tj /" . pattern
endfunction

command! LjyatSearchTags call LjyatSearchTags()

function! Arggrep(pattern_arg)
    if !filereadable("cscope.files")
        echohl Special
        echo "   cscope.files not exist"
        echohl None
        return
    endif

    echohl Question
    if a:pattern_arg != ''
        let pattern = input("  Search all-str: ", a:pattern_arg)
    else
        let pattern = input("  Search all-str: ", expand("<cword>"))
    endif
    echohl None

    if pattern == ""
        return 
    endif

    execute "silent! MarkClear|Mark " . pattern

    let pattern = "'" . pattern . "'" 
    let tmpfile = '/tmp/gvim.tmp' . getpid()
    let real_cmd = '!cat cscope.files|xargs grep -n -E ' . pattern . '  > ' . tmpfile
    redraw
    echomsg "Searching all-str..."
    execute "silent! " . real_cmd

python << EOF
import vim
import re

fname = vim.eval('tmpfile')
f = open(fname, 'r')
flist=f.readlines()
f.close()

old = ''
new = ''
args = ''
for new in flist:
    new = re.sub('\:.+$', '', new)
    new = new.strip()
    if old != new:
        args = args + new + ' '
    old = new
vim.command('args ' + args)
EOF

    if v:version >= 700 
        execute "silent! lgetfile " . tmpfile
    else
        if exists(":lgetfile")
            execute "silent! lgetfile " . tmpfile
        else
            execute "silent! lfile " . tmpfile
        endif
    endif

    redraw
    echomsg ""
    " Open the quickfix window below the current window
    lopen

    execute "silent! !rm -rf " . tmpfile
endfunction
command! Arggrep call Arggrep('')

"CscopeSearchStringPattern
function! LjyatSearchStringInFiles(pattern_arg)
    if !filereadable("cscope.files")
        echohl Special
        echo "   cscope.files not exist"
        echohl None
        return
    endif

    echohl Question
    if a:pattern_arg != ''
        let pattern = input("  Search all-str: ", a:pattern_arg)
    else
        let pattern = input("  Search all-str: ", expand("<cword>"))
    endif
    echohl None

    if pattern == ""
        return 
    endif

    execute "silent! MarkClear|Mark " . pattern

    let pattern = "'" . pattern . "'" 
    let tmpfile = '/tmp/gvim.tmp' . getpid()
    let real_cmd = '!cat cscope.files|xargs grep -n -E ' . pattern . '  > ' . tmpfile
    redraw
    echomsg "Searching all-str..."
    execute "silent! " . real_cmd

    let ef = &errorformat
    set efm=%f:%l:%m

    if v:version >= 700 
        execute "silent! lgetfile " . tmpfile
    else
        if exists(":lgetfile")
            execute "silent! lgetfile " . tmpfile
        else
            execute "silent! lfile " . tmpfile
        endif
    endif

    redraw
    echomsg ""
    " Open the quickfix window below the current window
    lopen

    let &errorformat=ef
    execute "silent! !rm -rf " . tmpfile
endfunction
command! LjyatSearchStringInFiles call LjyatSearchStringInFiles('')

"CscopeFindFilePattern
function! Argfind()
    if !filereadable("cscope.files")
        echohl Special
        echo "   cscope.files not exist"
        echohl None
        return
    endif

    echohl Question
    let pattern = input("  Search file: ")
    echohl None

    if pattern == ""
        return 
    endif

    let pattern = "'" . pattern . "'" 
    let tmpfile = '/tmp/gvim.tmp' . getpid()
    let real_cmd = '!grep  -i -E ' . pattern . ' cscope.files  > '  . tmpfile
    redraw
    echomsg "Searching file..."
    execute "silent! " . real_cmd

python << EOF
import vim
import re

fname = vim.eval('tmpfile')
f = open(fname, 'r')
flist=f.readlines()
f.close()

old = ''
new = ''
args = ''
for new in flist:
    new = new.strip()
    if old != new:
        args = args + new + ' '
    old = new
vim.command('args ' + args)
EOF

    let ef = &errorformat 
    set efm=%f

    if v:version >= 700 
        execute "silent! lgetfile " . tmpfile
    else
        if exists(":lgetfile")
            execute "silent! lgetfile " . tmpfile
        else
            execute "silent! lfile " . tmpfile
        endif
    endif

    redraw
    echomsg ""
    " Open the quickfix window below the current window
    lopen

    let &errorformat = ef 

    execute "silent! !rm -rf " . tmpfile
endfunction
command! Argfind call Argfind()

"CscopeFindFilePattern
function! LjyatSearchFileInFileList()
    if !filereadable("cscope.files")
        echohl Special
        echo "   cscope.files not exist"
        echohl None
        return
    endif

    echohl Question
    let pattern = input("  Search file: ")
    echohl None

    if pattern == ""
        return 
    endif

    let pattern = "'" . pattern . "'" 
    let tmpfile = '/tmp/gvim.tmp' . getpid()
    let real_cmd = '!grep  -i -E ' . pattern . ' cscope.files  > '  . tmpfile
    redraw
    echomsg "Searching file..."
    execute "silent! " . real_cmd

    let ef = &errorformat 
    set efm=%f

    if v:version >= 700 
        execute "silent! lgetfile " . tmpfile
    else
        if exists(":lgetfile")
            execute "silent! lgetfile " . tmpfile
        else
            execute "silent! lfile " . tmpfile
        endif
    endif

    redraw
    echomsg ""
    " Open the quickfix window below the current window
    lopen

    let &errorformat = ef 

    execute "silent! !rm -rf " . tmpfile
endfunction
"CscopeFindFilePattern
command! LjyatSearchFileInFileList call LjyatSearchFileInFileList()

function! LjyatSearchStringCurrentBuffer()
    let curfilename = expand("%")
    if curfilename == ""
        echohl Special
        echo "   buffer name is NULL"
        echohl None
        return
    endif

    echohl Question
    let pattern = input("  Search cur-str: ", expand("<cword>"))
    echohl None

    if pattern == ""
        return 
    endif

    execute "silent! MarkClear|Mark " . pattern

    let pattern = "/" . pattern . "/" 
    let real_cmd = "lvimgrep " . pattern . " %"
    redraw
    echomsg "Searching cur-str..."
    execute "silent! " . real_cmd

    redraw
    echomsg ""
    " Open the quickfix window below the current window
    lopen

endfunction
command! LjyatSearchStringCurrentBuffer call LjyatSearchStringCurrentBuffer()

function! LjyatVSearchStringCurrentBuffer()
    let curfilename = expand("%")
    if curfilename == ""
        echohl Special
        echo "   buffer name is NULL"
        echohl None
        return
    endif

    let old = @"
    exe "normal! gvy"
    let pattern = @"
    let @" = old

    let pattern = input("  Search cur-str: ", pattern)

    let pattern = "/" . pattern . "/" 
    let real_cmd = "lvimgrep " . pattern . " %"
    execute "silent! " . real_cmd

    redraw
    echomsg ""
    " Open the quickfix window below the current window
    lopen

endfunction
command! LjyatVSearchStringCurrentBuffer call LjyatVSearchStringCurrentBuffer()
function! LjyatVSearchStringInFiles()
    let old = @"
    exe "normal! gvy"
    let pattern = @"
    call LjyatSearchStringInFiles(pattern)
    let @" = old
endfunction

function! ToggleTlistTagbar()
    if &ft == 'cpp' || &ft == 'java'
        TagbarToggle
    else
        Tlist
    endif
endfunction

function! AutoToggleTlistTagbar()
    let tagbarwinnr = bufwinnr("__Tagbar__")
    let tlistwinnr = bufwinnr(g:TagList_title)

    if &ft == 'c'
        if tagbarwinnr != -1
            TagbarToggle
            if tlistwinnr == -1
                Tlist
            endif
        endif
    endif

    if &ft == 'cpp' || &ft == 'java'
        if tlistwinnr != -1
            Tlist
            if tagbarwinnr == -1
                TagbarToggle
            endif
        endif
    endif
endfunction

" => Set OminComplete
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType python set omnifunc=pythoncomplete#Complete 
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS 
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags 
autocmd FileType htm set omnifunc=htmlcomplete#CompleteTags 
autocmd FileType css set omnifunc=csscomplete#CompleteCSS 
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags 
autocmd FileType php set omnifunc=phpcomplete#CompletePHP 
autocmd FileType c,cpp,java,cs set omnifunc=ccomplete#Complete

autocmd BufEnter *.h,*.c,*.cpp,*.java call AutoToggleTlistTagbar()

" => Set OminComplete
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

