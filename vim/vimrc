set nocompatible

if has("syntax")
    syntax on
endif

filetype plugin indent on

if has("gui_running")
    set guioptions-=m
    set guioptions-=T
    set guioptions-=L
    set mouse=a		"Enable mouse in gui

    if has("win32")
        set guifont=Courier_New:h13:cANSI
        set fileencodings=
    else
        set guifont=Consolas\ 15
        set fileencodings=utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1,ucs-bom
        colorscheme ljyat
    endif
else
    set fileencodings=utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1,ucs-bom
    if &t_Co == 8
        colorscheme default
    else
        colorscheme mycterm
    endif
    set mouse=""	" Disenable mouse in vim
endif

""""""""Special in Gvim"""""""""""""""""""""""
"t_vb when use gvim , you have to set in /etc/vim/gvimrc,
"vimrc is not usefull for gvim
"set vb t_vb=
""""""""""""""""""""""""""""""""""""""""""""""
set showmatch		" Show matching brackets.
set incsearch		" Incremental search
set autowrite		" Automatically save before commands like :next and :make
set hidden             " Hide buffers when they are abandoned
set history=700
set scrolloff=0
set autoread
set ffs=unix,dos,mac
set noswapfile
set updatetime=200
set previewheight=10
set autoindent
set smartindent
set cindent
set expandtab tabstop=4 shiftwidth=4
set number
set nohlsearch
set smarttab
set linebreak
set linespace=3
set nobackup
set backspace=indent,eol,start
set nowrapscan
set winaltkeys=no
set diffopt=filler,vertical
set foldmethod=manual

"set statusline
set laststatus=2
set statusline=
set statusline+=%-f\ %w\ 
set statusline+=%{&fenc!=''?&fenc:&enc}\ \ 
set statusline+=%l/%L\ 
set statusline+=%-3m 

let c_syntax_for_h = 1
let Tlist_WinWidth = 40
let g:tagbar_left = 1
let g:tagbar_sort = 0
let g:tagbar_indent = 4
let html_wrong_comments = 1
"config for taglist
let Tlist_Inc_Winwidth = 0
let NERDTreeWinPos = "right"

if !exists("g:tmpcscope_files")
    let g:tmpcscope_files = 'cscope.files'
endif

if &dict == ''
    let &dict = 'dict'
endif
"=> key maps
"gui_running and only vim
nmap <F2> :call ToggleTlistTagbar()<CR>
nmap <F3> :LjyatNERDTreeOpenBufDir<CR>
nmap <Tab> gt
nmap <S-Tab> gT
nmap j gj
nmap k gk
"set for view kernel code
nmap <F5> :set noexpandtab tabstop=8 shiftwidth=8<CR>
nmap <F6> :set expandtab tabstop=4 shiftwidth=4<CR>
"set for edit chinese
nmap <F7> :set guifont=Microsoft\ Yahei\ Mono\ 15 linespace=6<CR>:AcpDisable<CR>
nmap <F8> :set guifont=Consolas\ 15 linespace=3<CR>:AcpEnable<CR>
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-h> <C-w>h
map <C-l> <C-w>l
nmap <M-=> :call IncreaseFontSize()<CR>
nmap <M--> :call DecreaseFontSize()<CR>
nmap <F4> :LjyatSearchStringCurrentBuffer<CR>
nmap <C-s> :LjyatSearchStringCurrentBuffer<CR>

"color set
nmap / <leader>r
nmap n <leader>/
nmap N <leader>?
nmap M :MarkClear<CR><leader>m
nmap <leader>] <C-w>g}
nmap <Space> <Nop>

"gui_running
nmap <M-f> :LjyatSearchFileInFileList<CR>
vnoremap <M-r> <ESC>:call LjyatVSearchStringInFiles()<CR>
vnoremap <M-R> <ESC>:call LjyatVSearchStringCurrentBuffer()<CR>

nmap <M-[> :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <M-\> :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <M-t> :cs f t
"=> switch windows
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <M-2> <C-w>c
nmap <M-3> <C-w>v
nmap <M-/> :LjyatSearchTags<CR>
"=> switch windows end
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"=> normal set
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"move
nmap <M-j> 3<C-e>
nmap <M-k> 3<C-y>
nmap <M-c> :MarkClear<CR>
nmap <M-q> <C-q>
"copy and paste
vmap <C-c> "+y
vmap m <leader>m
nmap <C-v> "+p
nmap <M-e> g_
nmap <M-a> 0
nmap <silent> <M-1> :pc<CR>:lclose<CR>:cclose<CR>
nmap <M-m> <leader>m
nmap <M-]> g<C-]>
nmap <M-LeftMouse> <LeftMouse><leader>m
nmap <RightMouse> <C-o>
nmap <S-LeftMouse> <LeftMouse>:MarkClear<CR><leader>m
nmap <M-RightMouse> :MarkClear<CR>
nmap <M-l> :LjyatShowMarks<CR>
nmap C :LjyatMarkClear<CR>
nmap B :LjyatAddMark<CR>

"grep -E
nmap <M-s> :LjyatSearchStringInFiles<CR>
nmap <F9> :edit ++ff=dos<CR>

"vim nmap
nmap <Space>s :LjyatSearchStringInFiles<CR>
nmap <Space>] g<C-]>
nmap <Space>m <leader>m
nmap <silent> <Space>1 :pc<CR>:lclose<CR>:cclose<CR>
nmap <Space>a 0
nmap <Space>e g_
nmap <Space>q <C-q>
nmap <Space>c :MarkClear<CR>
nmap <Space>k 3<C-y>
nmap <Space>j 3<C-e>
nmap <Space>/ :LjyatSearchTags<CR>
nmap <Space>3 <C-w>v
nmap <Space>2 <C-w>c
nmap <Space>t :cs f t
nmap <Space>\ :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <Space>[ :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <Space>f :LjyatSearchFileInFileList<CR>
nmap <Space>] g<C-]>
nmap <Space><RightMouse> :MarkClear<CR>
nmap <Space><LeftMouse> <LeftMouse><leader>m
nmap <Space>l :LjyatShowMarks<CR>
vnoremap <Space>R <ESC>:call LjyatVSearchStringCurrentBuffer()<CR>
vnoremap <Space>r <ESC>:call LjyatVSearchStringInFiles()<CR>

function! LjyatNERDTreeOpenBufDir()
    call LjyatSkipSpecWindow()
    if (exists("t:NERDTreeBufName"))
        if (bufwinnr(t:NERDTreeBufName) != -1)
            execute "silent! NERDTreeClose"
            return
        endif
    endif
    let l:bufname = bufname("%")
    execute "silent! NERDTree " . l:bufname
    redraw!
endfunction

"=> cscope set
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("cscope")
    set csprg=/usr/bin/cscope
    set csto=1
    set nocst
    " add any database in current directory
    if filereadable("cscope.out")
        silent! cs add cscope.out
        " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif
endif

function! CleanTmpCscopeFiles()
    if g:tmpcscope_files == "cscope.files"
        return
    else
        execute "silent! !rm -rf " . g:tmpcscope_files
    endif
    redraw!
endfunction

function! ResetTagsAndCscope()
    silent exe "cs kill -1"
    call CleanTmpCscopeFiles()
    let &tags="./tags,./TAGS,tags,TAGS"
    let &dict="dict"
    let g:tmpcscope_files = 'cscope.files'

    if filereadable('cscope.out')
        silent! exe "cscope add cscope.out"
    endif
    echohl Todo
    echo "   ResetTagsAndCscope"
    echohl None
    return
    redraw!
endfunction

function! AddCscopeAndTags(predirs)
    if a:predirs == ''
        echohl Todo
        echo "   prepath is empty"
        echohl None
        return
    endif

    if g:tmpcscope_files == 'cscope.files'
        let g:tmpcscope_files = "/tmp/cscope.files." . getpid()
        if filereadable('cscope.files')
            silent exe "!cat cscope.files > " . g:tmpcscope_files
        endif
    endif

    for dir in split(a:predirs, ",")
        let dir = split(dir, "\"")[0]
        let dir = expand(dir)
        let dir = substitute(dir, '/$', '','')
        let new_tag_path=dir . "/tags"
        let new_dict_path=dir . "/dict"
        let new_cscope_path=dir . "/cscope.out"
        let new_cscope_files=dir . "/cscope.files"

        if filereadable(new_cscope_files)
            silent exe "!cat " . new_cscope_files . "|sed 's:^:" . dir . "/:' >> " . g:tmpcscope_files
        endif

        if filereadable(new_tag_path) && filereadable(new_cscope_path)
            let &tags = &tags . "," . new_tag_path
            let &dict = &dict . "," . new_dict_path

            "cscope prepath always need a '/'
            if stridx(dir, "/") == -1
                let dir = substitute(dir, '^', './','')
            endif
            silent! exe "cscope add " . new_cscope_path . " " . dir
        else
            echohl Todo
            echo "   No needed file in: " . dir
            echohl None
            return
        endif
    endfor
    redraw!
endfunction

function! LjyatSearchTags()
    echohl Question
    let pattern = input("  Search tag: ")
    echohl None

    if pattern == ""
        return
    endif

    execute "tj /" . pattern
    redraw!
endfunction

function! Arggrep(pattern_arg)
    if !filereadable(g:tmpcscope_files)
        echohl Todo
        echo "   cscope.files not exist"
        echohl None
        return
    endif

    if a:pattern_arg == ''
        echohl Todo
        echo "   pattern is null"
        echohl None
        return
    endif

    execute "silent! MarkClear|silent! Mark " . a:pattern_arg

    let pattern_arg = "'" . a:pattern_arg . "'"
    let tmpfile = '/tmp/gvim.tmp' . getpid()
    let real_cmd = '!cat ' . g:tmpcscope_files .' |xargs grep -n -E ' . pattern_arg . '  > ' . tmpfile
    echomsg "Searching all-str..."
    execute "silent! " . real_cmd

python << EOF
import vim
import re

fname = vim.eval('tmpfile')
f = open(fname, 'r')
flist=f.readlines()
f.close()

old = ''
new = ''
args = ''
for new in flist:
    new = re.sub('\:.+$', '', new)
    new = new.strip()
    if old != new:
        args = args + new + ' '
    old = new
vim.command('args ' + args)
EOF

    if v:version >= 700
        execute "silent! lgetfile " . tmpfile
    else
        if exists(":lgetfile")
            execute "silent! lgetfile " . tmpfile
        else
            execute "silent! lfile " . tmpfile
        endif
    endif

    lopen
    execute "silent! !rm -rf " . tmpfile
    redraw!
endfunction

function! LjyatSearchStringInFiles(pattern_arg)
    if !filereadable(g:tmpcscope_files)
        echohl Todo
        echo "   cscope.files not exist"
        echohl None
        return
    endif

    echohl Question
    if a:pattern_arg != ''
        let pattern = input("  Search all-str: ", a:pattern_arg)
    else
        let pattern = input("  Search all-str: ", expand("<cword>"))
    endif
    echohl None

    if pattern == ""
        return
    endif

    "silent execute "MarkClear|Mark " . pattern
    redraw

    let pattern = "'" . pattern . "'"
    let tmpfile = '/tmp/gvim.tmp' . getpid()
    let real_cmd = '!cat '. g:tmpcscope_files . '|xargs grep -n -E ' . pattern . '  > ' . tmpfile
    echomsg "Searching all-str..."
    execute "silent! " . real_cmd

    let ef = &errorformat
    set efm=%f:%l:%m

    if v:version >= 700
        execute "silent! lgetfile " . tmpfile
    else
        if exists(":lgetfile")
            execute "silent! lgetfile " . tmpfile
        else
            execute "silent! lfile " . tmpfile
        endif
    endif

    lopen
    let &errorformat=ef
    execute "silent! !rm -rf " . tmpfile
    redraw!
endfunction

function! Argfind(pattern)
    if !filereadable(g:tmpcscope_files)
        echohl Todo
        echo "   cscope.files not exist"
        echohl None
        return
    endif

    if a:pattern == ''
        echo "   pattern is null"
        return
    endif

    let pattern = "'" . a:pattern . "'"
    let tmpfile = '/tmp/gvim.tmp' . getpid()
    let real_cmd = '!grep  -i -E ' . pattern . ' ' . g:tmpcscope_files . ' > '  . tmpfile
    echomsg "Searching file..."
    execute "silent! " . real_cmd

python << EOF
import vim
import re

fname = vim.eval('tmpfile')
f = open(fname, 'r')
flist=f.readlines()
f.close()

old = ''
new = ''
args = ''
for new in flist:
    new = new.strip()
    if old != new:
        args = args + new + ' '
    old = new
vim.command('args ' + args)
EOF

    let ef = &errorformat
    set efm=%f

    if v:version >= 700
        execute "silent! lgetfile " . tmpfile
    else
        if exists(":lgetfile")
            execute "silent! lgetfile " . tmpfile
        else
            execute "silent! lfile " . tmpfile
        endif
    endif

    lopen
    let &errorformat = ef
    execute "silent! !rm -rf " . tmpfile
    redraw!
endfunction

function! LjyatSearchFileInFileList()
    if !filereadable(g:tmpcscope_files)
        echohl Todo
        echo "   cscope.files not exist"
        echohl None
        return
    endif

    echohl Question
    let pattern = input("  Search file: ")
    echohl None

    if pattern == ""
        return
    endif

    let pattern = "'" . pattern . "'"
    let tmpfile = '/tmp/gvim.tmp' . getpid()
    let real_cmd = '!grep  -i -E ' . pattern . ' ' . g:tmpcscope_files . ' > '  . tmpfile
    echomsg "Searching file..."
    execute "silent! " . real_cmd

    let ef = &errorformat
    set efm=%f

    if v:version >= 700
        execute "silent! lgetfile " . tmpfile
    else
        if exists(":lgetfile")
            execute "silent! lgetfile " . tmpfile
        else
            execute "silent! lfile " . tmpfile
        endif
    endif

    lopen
    let &errorformat = ef
    execute "silent! !rm -rf " . tmpfile
    redraw!
endfunction

function! LjyatSkipSpecWindow()
    let win_count = winnr('$') "loop back to this window again
    let win_pos = 0
    while &buftype != ""
        if win_pos == win_count
            break
        endif
        let win_pos = win_pos + 1
        wincmd w
    endwhile
endfunction

function! LjyatSearchStringCurrentBuffer()
    call LjyatSkipSpecWindow()
    let curfilename = expand("%")
    if curfilename == ""
        echohl Todo
        echo "   buffer name is NULL"
        echohl None
        return
    endif

    echohl Question
    let pattern = input("  Search cur-str: ", expand("<cword>"))
    echohl None

    if pattern == ""
        return
    endif

    "execute "silent! MarkClear|Mark " . pattern

    let pattern = "/" . pattern . "/"
    let real_cmd = "lvimgrep " . pattern . " %"
    echomsg "Searching cur-str..."
    execute "silent! " . real_cmd
    lopen
    redraw!
endfunction

function! LjyatVSearchStringCurrentBuffer()
    let curfilename = expand("%")
    if curfilename == ""
        echohl Todo
        echo "   buffer name is NULL"
        echohl None
        return
    endif

    let old = @"
    exe "normal! gvy"
    let pattern = @"
    let @" = old

    let pattern = input("  Search cur-str: ", pattern)

    let pattern = "/" . pattern . "/"
    let real_cmd = "lvimgrep " . pattern . " %"
    execute "silent! " . real_cmd

    lopen
    redraw!
endfunction

function! LjyatVSearchStringInFiles()
    let old = @"
    exe "normal! gvy"
    let pattern = @"
    call LjyatSearchStringInFiles(pattern)
    let @" = old
    redraw!
endfunction

function! ToggleTlistTagbar()
    if &ft == 'cpp' || &ft == 'java'
        TagbarToggle
    else
        Tlist
    endif
endfunction

function! AutoToggleTlistTagbar()
    let tagbarwinnr = bufwinnr("__Tagbar__")
    let tlistwinnr = bufwinnr(g:TagList_title)

    if &ft == 'c'
        if tagbarwinnr != -1
            TagbarToggle
            if tlistwinnr == -1
                Tlist
            endif
        endif
    endif

    if &ft == 'cpp' || &ft == 'java'
        if tlistwinnr != -1
            Tlist
            if tagbarwinnr == -1
                TagbarToggle
            endif
        endif
    endif
endfunction

function! IncreaseFontSize()
    if has("gui_running")
        let oldft=&guifont
        let font_name=substitute(oldft, ' \d\+$', "", "")
        let font_size=substitute(oldft, '.\+ ', "", "")
        let font_size += 1
        let &guifont=font_name . " " . font_size
    endif
endfunction

function! DecreaseFontSize()
    if has("gui_running")
        let oldft=&guifont
        let font_name=substitute(oldft, ' \d\+$', "", "")
        let font_size=substitute(oldft, '.\+ ', "", "")
        let font_size -= 1
        let &guifont=font_name . " " . font_size
    endif
endfunction

let s:mark_index = 0
let s:mark_list=[]
function! LjyatAddMark()
    let s:mark_tag_{s:mark_index} = bufname('%'). ":". line('.') .":".getline('.')
    let s:mark_list+=[s:mark_tag_{s:mark_index}]
    let s:mark_index+=1
endfunction

function! LjyatShowMarks()
    if s:mark_index == 0
        echohl Todo
        echo " No marks "
        echohl None
        return
    endif

    let ef = &errorformat
    set efm=%f:%l:%m
    exe "cgetexpr s:mark_list"
    exe "botright copen"
    let &errorformat = ef
endfunction

function! LjyatMarkClear()
    let s:mark_index = 0
    let s:mark_list=[]
    execute "cclose"
endfunction

command! -nargs=1 Argfind call Argfind(<f-args>)
command! -nargs=+ -complete=dir A call AddCscopeAndTags('<f-args>')
command! -nargs=0 R call ResetTagsAndCscope()
command! LjyatNERDTreeOpenBufDir call LjyatNERDTreeOpenBufDir ()
command! LjyatSearchTags call LjyatSearchTags()
command! -nargs=1 Arggrep call Arggrep(<f-args>)
command! LjyatSearchStringInFiles call LjyatSearchStringInFiles('')
command! LjyatSearchFileInFileList call LjyatSearchFileInFileList()
command! LjyatVSearchStringCurrentBuffer call LjyatVSearchStringCurrentBuffer()
command! LjyatSearchStringCurrentBuffer call LjyatSearchStringCurrentBuffer()
command! LjyatAddMark call LjyatAddMark()
command! LjyatShowMarks call LjyatShowMarks()
command! LjyatMarkClear call LjyatMarkClear()

" => Set OminComplete
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
augroup LjyatAutoCmds
    autocmd!
    autocmd FileType python set omnifunc=pythoncomplete#Complete
    autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
    autocmd FileType htm set omnifunc=htmlcomplete#CompleteTags
    autocmd FileType css set omnifunc=csscomplete#CompleteCSS
    autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
    autocmd FileType php set omnifunc=phpcomplete#CompletePHP
    autocmd FileType c,cpp,java,cs set omnifunc=ccomplete#Complete

    autocmd BufEnter *.h,*.c,*.cpp,*.java call AutoToggleTlistTagbar()
    autocmd VimLeave * call CleanTmpCscopeFiles()
    autocmd BufNewFile,BufRead *.aidl setf java
augroup end
" => Set OminComplete
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

